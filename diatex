#!/usr/bin/ruby
# rubocop:disable Metrics/LineLength

require 'digest'
require 'net/http'
require 'cgi'
require 'json'

REGEX = %r{
  ^(?<!<!---\n)                   # Make sure its not a comment
  (?<declaration>
    ```(?<type>latex|diagram)   # Match the content of latex or diagram
    \n
    (.|\n)*?                    # Non-greedy match all and new line, for actual declaration
    \n
    ```
  )
  (?!\n?--->)$                     # Make sure its really not a comment
}x

def latex_image_url(content)
  # Weird encodings happen if we don't escape
  # The Server also expects this escaped
  content = content.strip.gsub(/\\\[/, '').gsub(/\\\]/, '') # Strip of surrounding \[ \]
  body = { latex: CGI.escape(content.strip) }
  uri = URI('https://jnadeau.ca/diatex/latex')
  fetch_response(uri, body)
end

def diagram_image_url(content)
  body = { diagram: content }
  uri = URI('https://jnadeau.ca/diatex/diagram')
  fetch_response(uri, body)
end

def fetch_response(uri, body)
  http = Net::HTTP.new(uri.host, uri.port)
  http.use_ssl = true
  request = Net::HTTP::Get.new(uri.request_uri, 'Content-Type' => 'application/json')
  request.basic_auth('diatex', ENV['DIATEX_PASSWORD'])
  request.body = body.to_json
  response = http.request(request)

  # Parse the response
  parsed = JSON.parse(response.body)
  if parsed['error']
    puts parsed['error']
    puts parsed['output']
    return nil
  else
    parsed['url']
  end
end

def replacement_text(match, content, type, local: false)
  url = nil
  height = "75px"

  case type
  when 'latex'
    url = latex_image_url(content) unless local
    height = "75px"
  when 'diagram'
    url = diagram_image_url(content) unless local
    height = "250px"
  end
  raise 'Error from upstream' if !local && (url.nil? || url == '')

  # The replacement text will be HTML commented blocks, followed by a markdown image
  [
    "\n<!---\n#{match.strip.gsub('-->', '-\->')}\n--->\n",
    "<img src='#{url}' alt='#{type} image' height='#{height}'>\n"
  ].join
end

# Read each file as and replace the content specified by the REGEX
def parse_file(file, local: false)
  File.read(file).gsub(REGEX) do |match|
    r = Regexp.last_match
    content = match.gsub(/```\S*/, '').strip # Remove the backticks and new lines
    replacement_text(match, content, r['type'].downcase, local: local)
  end
end

# Make sure env is setup
raise 'Did not provide DIATEX_PASSWORD env var' if ENV['DIATEX_PASSWORD'].nil? && ARGV[1] != 'local'
# Make sure directory is provide and exists as a directory
raise 'Did not provide a path as an argument' if ARGV[0].nil?
raise "Path #{ARGV[0]} did not exist as a directory" if !File.exist?(ARGV[0]) || !File.directory?(ARGV[0])

# Parse all markdown files in specified directory
Dir["#{ARGV[0]}/**/*.md"].each do |file|
  printf file
  new_content = parse_file(file, local: ARGV[1] == 'local')
  File.write(file, new_content)
  printf " >>> Done\n"
end
